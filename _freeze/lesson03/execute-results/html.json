{
  "hash": "7b4266d074adf7cbfdbb5fb5ff726169",
  "result": {
    "markdown": "# Starting a project \n## Starting a new project\nTo begin, we must first open a new project. \n\n1. To open a new project, you first select the RStudio app on your computer. Unless immediately prompted, select *New Project* under the *File* tab. \n\n![](drop down.png){fig-align=\"center\"}\n\n2. Next you will be prompted select which Directory type. Select *New Directory*. \n\n![](startnewproj.png){fig-align=\"center\"}\n\n3. Next, in the *Project Type* screen, you will select *New Project*. \n\n![](newproj.png){fig-align=\"center\"}\n\n4. Once selected, you will be prompted to name the Directory. Make this name unique and choose where you would like it to be saved. \n\n![](new.proj.name.png){fig-align=\"center\"}\n\n## R-compatible data sets \nWhen importing a data set from excel into R, the file type must be a **.csv**, rather than the typical **.xlsx**.\n\nFor further instruction on preparing an R-ready .csv, please see the link below. \n\n[Building an R-friendly .csv](http://www.sthda.com/english/wiki/best-practices-in-preparing-data-files-for-importing-into-r)\n\n## How to get data into R\n### Importing data {.unnumbered}\n#### Working directory {.unnumbered}\nYour working directory is where you will have R pull data sheets from.\nThere are two common ways of doing this. \n\nThe first step is to determine where R currently thinks our working directory is. \nTo do this, we use the **getdw** function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n\n#output:\"C:/Users/jsada/OneDrive - The Pennsylvania State University/Documents\"\n```\n:::\n\n\nAs you can see, the output shows my computer pathway, or source, of where R will be obtaining files.  \nIf we wish to change this, we have two options. \n\nFirst, we will use the **setwd** package. \nWithin the  parentheses of this function, we will write out the desired pathway. \nLet's say I wish to be more specific than just the *Documents* folder. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/jsada/OneDrive - The Pennsylvania State University/Documents/Research/R/Intern Tutorial/Book\")\n```\n:::\n\n\nThe second method for setting your working directory is done through the *Session* menu at the top.\nYou will then hover over *Set Working Directory* and then select *Choose Directory...*\nFrom here, you will navigate to the folder you wish to pull data from. \n\n![Setting my working directory](directory.png)\n\nNow that we have our working directory set, we can take a look into the folder. \n\nTo see how many files are in my directory, I will use the **length** function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(list.files())\n#output: 24\n```\n:::\n\n\nTo see the first five files within my directory, I will use the **head** function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(list.files())\n#output:\n\n#[1] \"_book\"         \"_quarto.yml\"   \"Book.Rproj\"    \"cover.png\"    \n#[5] \"directory.png\" \"Glossary.qmd\" \n```\n:::\n\n\nThe last command we will run to investigate our working directory is the **%in%** operator. We will use this operator to see if there is specific file within our directory. This operator will provide us with a logical out (TRUE or FALSE). When calling a specific object, we must use either half, or full parentheses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n'Book.Rproj' %in% list.files()\n\n#output: TRUE\n```\n:::\n\n\n#### Github{.unnumbered}\nIn this book, I will not cover using the Github platform for data storage.\nIf you wish to explore this further, please see the linked tutorial below. \n\n[A Github tutorial by Callum Arnold](https://psu-git.callumarnold.com/)\n\n## Types of data\nNow that we have our data set imported into R, we can begin looking our data. \nThe first step is gaining an understanding of the *type* of data we have. \nWithin R, there are 5 main types of data. \nThese include: \n\n| Data type   | Example                                                        |\n|-------------|----------------------------------------------------------------|\n| `numeric`   | (10.5,55,680)                                                  |\n| `integer`   | (1L, 55L, 100L, where the letter \"L\" declares this an integer) |\n| `complex`   | (9+3i, where \"i\" is the imaginary part)                        |\n| `character` | (Also known as strings - \"k\", \"bugsRcool\", \"11.5\", \"etc.\")         |\n| `logical`   | (TRUE and FALSE)                                               |\n\nWhen it comes to data manipulations, statistical tests, model building, and developing plots, it is incredibly important that our data are classified as the correct data type. \nTo determine this for single variables or values, we use the **class** function. \n\nCopy these examples into your script to try this function out. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# numeric \nx <- 10\nclass(x)\n\n# integer\nx <- 10L\nclass(x)\n\n# complex\nx <- 9i + 3\nclass(x)\n\n#character/string\nX <- \"Boy howdy, this is rivetting stuff\"\nclass(x)\n\n# logical \nx <- TRUE\nclass(x)\n```\n:::",
    "supporting": [
      "lesson03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}