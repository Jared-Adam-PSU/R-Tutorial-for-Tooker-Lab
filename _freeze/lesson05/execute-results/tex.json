{
  "hash": "49da57e40ba7e50caab05a59b6e45e45",
  "result": {
    "markdown": "# Getting fancy widdit \n## Functions, packages, and all that jazz\n### What is a function?{.unnumbered}\nA **function** in R is an object containing multiple interrelated statements that are run together in a predefined order every time the function is called.\nWhat this means, is that within every function, there are set of instructions to be followed in their respective order to complete a desired task. \n\n\nFor example, let's say we want to find the mean value of a desired set of numbers. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(1+2+3+4+5+6) / 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.5\n```\n:::\n:::\n\n\nThis is an effective method for acquiring the average of a small set of numbers that are not saved in R. But, what if they were saved? \n\nIn this example, we create a vector named 'Mean_Example' with the previous six numbers.\nRather than adding them manually, we use the **sum** function to automatically add the values. \nWe then set this sum to be divided by six, which is the total number of values. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMean_Example <- c(1,2,3,4,5,6)\n\nsum(Mean_Example)/6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.5\n```\n:::\n:::\n\n\n\n\nNow, let's crank this up a notch. What do we do if we have a large data set and want to calculate the mean of a column? \nFirst, I created a data set named *'bugs'* with three columns: *spiders, beetles, and wasps*. Then, using the **rnorm** function, I set the number of values per column with a **default mean of 0** and standard deviation of 1. The purpose of this fake data set is just so we have something to work with with an *expected* mean. \n\nOnce this data set is created, we can test out the **mean** function on one of the columns. Within the mean function, I tell R to take the mean of the spider column FROM the 'bugs' data set we created. The '$' symbol tells R where to look within an existing data set. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbugs <- data.frame(\n  spiders = rnorm(200),\n  beetles = rnorm(250),\n  wasps = rnorm(1000)\n)\n\nmean(bugs$spiders)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.1265351\n```\n:::\n\n```{.r .cell-code}\n#Remember, our default mean was 0\n```\n:::\n\n\n\n      \n### What is a package?{.unnumbered}\nWhile R has many built in functions (e.g., **mean**), some of the most useful functions do not come pre-installed. \nWhen this is the case, they are provided to us in well made, neatly packed downloadable objects called *packages*.\nIn essence, the creator of the package has nestled a bunch of things to make your programming life easier into a little folder you can download, and use, at your leisure.\nAn R package can bundle together useful function, help files, and data sets. \nTypically, a package will have a list of functions all related to the same task or set of tasks. \n\nLet's take a look at the **ggplot2** package. \nThe *purpose* of this package is on the **grammar of graphics**; the idea that you can build every graph from the same components: a **data** set, a **coordinate system**, and **geoms**-visual marks that represent data points. \nFunctions, such as **ggplot**, that reside within this package are all designed for the ease of figure development. \n\nLet's take a look at how to download a package, starting with **ggplot2**.\n\nTo download a package, we must use the **install.packages** function, and place the desired package name in *\"quotation marks\"* within the function parenthesis. \nOnce downloaded, we must then 'call' the function into our system. \nUsing the **library** function, we tell R to load this package into our current project. \nWe only need to install the package once, but we must 'call' it in every time we restart Rstudio. (To run this code, you must remove the # symbol from **install.packages**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"ggplot2\")\n\nlibrary(ggplot2)\n```\n:::\n\n\n  \n### Packages with data {.unnumbered}\nNow that we can investigated installing and downloading a package for the use of functions, we will now explore available data sets on R. \nThere are many available data sets within R that we can download and practice programming, but for this tutorial we will work with **Palmer Penguins**. \nIt is wise to download this now, because we will revisit this data set in future sections. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"palmerpenguins\")\n\nlibrary(palmerpenguins)\n```\n:::\n",
    "supporting": [
      "lesson05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}